{"version":3,"sources":["components/Player/store/actionTypes.ts","apis/url.ts","apis/axiosInstance.ts","apis/config.ts","pages/Recommend/store/actionTypes.ts","pages/Singer/store/actionTypes.ts","pages/Singers/store/actionTypes.ts","apis/requests/singer.ts","pages/Rank/store/actionTypes.ts","pages/Album/store/actionTypes.ts","components/Player/store/actions.ts","components/Player/store/reducer.ts","store/actionTypes.ts","pages/Singers/store/actions.ts","pages/Singer/store/actions.ts","apis/requests/recommend.ts","pages/Recommend/store/actions.ts","pages/Rank/store/actions.ts","apis/requests/rank.ts","apis/requests/album.ts","pages/Album/store/actions.ts","pages/Recommend/store/reducer.ts","App.module.scss","router/index.tsx","store/reducer.ts","pages/Singers/store/reducer.ts","pages/Rank/store/reducer.ts","pages/Album/store/reducer.ts","pages/Singer/store/reducer.ts","store/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SET_CURRENT_SONG","SET_CURRENT_INDEX","SET_SONG_LIST","SET_PLAY_STATUS","SET_SHOW_SONG_LIST","DELETE_SONG","SET_FULLSCREEN","GET_BANNERS","GET_RECOMMEND_LIST","GET_RECOMMEND_NEW_SONGS","GET_RANK_LIST","GET_SINGER_LIST","GET_SINGER_DETAIL_AND_HOT_SONGS","GET_ALBUM_DETAIL_BY_ID","axiosInstance","axios","create","baseURL","timeout","interceptors","response","use","res","status","data","code","Promise","resolve","reject","error","console","log","axiosGet","url","params","get","SET_RECOMMEND_LIST","SET_RECOMMEND_SONGS","SET_SINGER_DETAIL","SET_SINGER_LOADING","SET_SINGER_LIST","getSingerListRequest","offset","initial","getSingerDetailRequest","id","a","artist","hotSongs","map","item","name","album","al","singers","ar","dt","SET_RANK_DATA","SET_ALBUM_DETAIL","changeCurrentSongAction","payload","type","changeCurrentIndexAction","changeSongListAction","changePlayStatusAction","changeShowSongListAction","deleteSongAction","changeFullscreenAction","produce","state","action","currentSong","idx","songList","length","currentIndex","playStatus","showSongList","index","splice","deleteSongFromPlayList","fullScreen","TOGGLE_TOAST","getSingerListAction","dispatch","resp","artists","changeSingerDetailAction","getSingerDetailAction","getRecommendNewSongsRequest","result","song","duration","changeRecommendList","changeRecommendSongs","getRecommendListAction","limit","getRecommendSongsAcrion","dispath","getRankListAction","list","globalList","filter","tracks","officialList","getAlbumDetailRequest","playlist","getAlbumDetailAction","recommendList","recommendSongs","loading","module","exports","HomeLayout","lazy","Recommend","Singers","Rank","Album","routes","component","path","exact","render","to","key","show","showToast","toastText","singerList","albumDetail","singerDetail","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","recommend","recommendReducer","toast","toastReducer","player","playerReducer","singersReducer","rank","rankReducer","albumReducer","singer","singerReducer","store","createStore","applyMiddleware","thunk","App","className","style","fallback","renderRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.34b05dcd.chunk.js","sourcesContent":["export const SET_CURRENT_SONG: string = \"SET_CURRENT_SONG\";\n\nexport const SET_CURRENT_INDEX: string = \"SET_CURRENT_INDEX\";\n\nexport const SET_SONG_LIST: string = \"SET_SONG_LIST\";\nexport const SET_PLAY_STATUS: string = \"SET_PLAY_STATUS\";\nexport const SET_SHOW_SONG_LIST: string = \"SET_SHOW_SONG_LIST\";\n// 删除歌曲\nexport const DELETE_SONG: string = \"DELETE_SONG\";\nexport const SET_FULLSCREEN: string = \"SET_FULLSCREEN\";\n","/**\n * @description 接口地址统一管理\n */\n\n/**\n * 推荐相关\n */\nexport const GET_BANNERS: string = '/banner'; // banner\nexport const GET_RECOMMEND_LIST: string = '/personalized'; // 推荐歌单\nexport const GET_RECOMMEND_NEW_SONGS: string = '/personalized/newsong'; // 推荐新歌\n\n/**\n * 排行榜相关\n */\nexport const GET_RANK_LIST: string = '/toplist/detail'; // 榜单列表\n\n/**\n * 歌手相关\n */\nexport const GET_SINGER_LIST: string = '/artist/list'; // 歌手列表\nexport const GET_SINGER_DETAIL_AND_HOT_SONGS: string = '/artists'; // 歌手信息和热门歌曲\n\n/**\n * 歌单相关\n */\nexport const GET_ALBUM_DETAIL_BY_ID: string = '/playlist/detail'; // 歌单详情\n\n/**\n * 搜索相关\n */\nexport const GET_HOT_KEYWORDS_LIST: string = '/search/hot'; // 热门搜索关键词\nexport const GET_SEARCH_LIST_BY_KEYWORDS: string = '/search'; // 搜索\nexport const GET_SEARCH_SUGGEST_BY_KEYWORDS: string = '/search/suggest'; // 搜索建议\n\n/**\n * 歌曲相关\n */\nexport const GET_LYRIC: string = '/lyric'; // 歌词\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\n\nimport { BASE_URL, TIME_OUT, errorHandle } from \"./config\";\n\ninterface IResponseData {\n  code: number;\n  total?: number;\n  [key: string]: any;\n}\n\n// 创建axios实例\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  timeout: TIME_OUT,\n});\n\n// 响应拦截\naxiosInstance.interceptors.response.use(\n  (res: AxiosResponse) => {\n    if (res.status === 200) {\n      const code: number = res.data.code;\n      if (code === 200) {\n        return Promise.resolve(res.data);\n      }\n    }\n    return Promise.reject(res.data);\n  },\n  (error: AxiosError) => {\n    if (error && error.response) {\n      // 请求已发出，但是不在2xx的范围\n      errorHandle(error.response.status);\n      return Promise.reject(error.response);\n    } else {\n      console.log(\"网络请求失败, 请刷新重试\");\n      return Promise.reject(error);\n    }\n  }\n);\n\nconst axiosGet = (url: string, params?: any): Promise<IResponseData> =>\n  axiosInstance.get(url, { params });\nconst axiosPost = (url: string, params?: any): Promise<IResponseData> =>\n  axiosInstance.post(url, params);\n\nexport { axiosGet, axiosPost };\n\nexport default axiosInstance;\n","const BASE_URL: string = \"https://collin-netease-cloud-music-api.vercel.app/\";\n\nconst TIME_OUT: number = 1000 * 10;\n\n/**\n * 请求失败后的错误统一处理\n * @param status 状态码\n */\nconst errorHandle = (status: number): void => {\n  // HTTP状态码判断\n  if (status >= 500) {\n    console.log(\"系统开小差了, 请联系技术管理员或稍后重试\");\n  } else {\n    console.log(\"网络请求失败, 请刷新重试\");\n  }\n};\n\nexport { BASE_URL, TIME_OUT, errorHandle };\n","export const SET_RECOMMEND_LIST: string = \"SET_RECOMMEND_LIST\";\nexport const SET_RECOMMEND_SONGS: string = \"SET_RECOMMEND_SONGS\";\n","// 设置歌手详情\nexport const SET_SINGER_DETAIL: string = \"SET_SINGER_DETAIL\";\n\n// 设置loading状态\nexport const SET_SINGER_LOADING: string = \"SET_SINGER_LOADING\";\n","export const SET_SINGER_LIST: string = \"SET_SINGER_LIST\";\n","import { axiosGet } from \"../axiosInstance\";\nimport { GET_SINGER_LIST, GET_SINGER_DETAIL_AND_HOT_SONGS } from \"../url\";\n\n/**\n * 请求歌手列表数据\n * @param offset\n * @param initial 首字母\n */\nconst getSingerListRequest = (offset: number, initial?: string) => {\n  return axiosGet(GET_SINGER_LIST, { offset, initial });\n};\n\n/**\n * 请求歌手信息和热门歌曲数据\n * @param id 歌手id\n */\nconst getSingerDetailRequest = async (id: number) => {\n  const { artist, hotSongs } = await axiosGet(GET_SINGER_DETAIL_AND_HOT_SONGS, {\n    id,\n  });\n  return {\n    ...artist,\n    hotSongs: hotSongs.map((item: any) => {\n      return {\n        id: item.id,\n        name: item.name,\n        album: item.al,\n        singers: item.ar,\n        dt: item.dt,\n      };\n    }),\n  };\n};\n\nexport { getSingerListRequest, getSingerDetailRequest };\n","export const SET_RANK_DATA: string = \"SET_RANK_DATA\";\n","// 设置歌单详情\nexport const SET_ALBUM_DETAIL: string = \"SET_ALBUM_DETAIL\";\n","import { Song } from \"../../../typings\";\nimport {\n  DELETE_SONG,\n  SET_CURRENT_INDEX,\n  SET_CURRENT_SONG,\n  SET_FULLSCREEN,\n  SET_PLAY_STATUS,\n  SET_SHOW_SONG_LIST,\n  SET_SONG_LIST,\n} from \"./actionTypes\";\n\nexport const changeCurrentSongAction = (payload: Song) => {\n  return {\n    type: SET_CURRENT_SONG,\n    payload,\n  };\n};\n\nexport const changeCurrentIndexAction = (payload: number) => {\n  return {\n    type: SET_CURRENT_INDEX,\n    payload,\n  };\n};\n\nexport const changeSongListAction = (payload: Song[]) => {\n  return {\n    type: SET_SONG_LIST,\n    payload,\n  };\n};\n\nexport const changePlayStatusAction = (payload: boolean) => {\n  return {\n    type: SET_PLAY_STATUS,\n    payload,\n  };\n};\n\nexport const changeShowSongListAction = (payload: boolean) => {\n  return {\n    type: SET_SHOW_SONG_LIST,\n    payload,\n  };\n};\n\nexport const deleteSongAction = (payload: number) => {\n  return {\n    type: DELETE_SONG,\n    payload,\n  };\n};\nexport const changeFullscreenAction = (payload: boolean) => {\n  return {\n    type: SET_FULLSCREEN,\n    payload,\n  };\n};\n","import { stat } from \"fs\";\nimport produce from \"immer\";\nimport { IAction, Song } from \"../../../typings\";\nimport {\n  DELETE_SONG,\n  SET_CURRENT_INDEX,\n  SET_CURRENT_SONG,\n  SET_FULLSCREEN,\n  SET_PLAY_STATUS,\n  SET_SHOW_SONG_LIST,\n  SET_SONG_LIST,\n} from \"./actionTypes\";\n\nexport interface PlayerState {\n  currentSong: Song | null;\n  songList: Song[];\n  currentIndex: number;\n  playStatus: boolean;\n  showSongList: boolean;\n  fullScreen: boolean;\n}\n\nexport interface PlayerAction extends IAction {\n  payload: Song | Song[] | number | boolean;\n}\n\nconst initState: PlayerState = {\n  currentSong: null,\n  songList: [],\n  currentIndex: -1,\n  playStatus: false,\n  showSongList: false,\n  fullScreen: false,\n};\n\n/**\n * 删除指定歌曲\n * @param state\n * @param index\n */\nconst deleteSongFromPlayList = (state: PlayerState, index: number): void => {\n  const { songList, currentIndex } = state;\n\n  songList.splice(index, 1);\n  if (index <= currentIndex) {\n    state.currentIndex = state.currentIndex === 0 ? 0 : state.currentIndex - 1;\n  }\n};\n\nexport default produce((state: PlayerState, action: PlayerAction) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_CURRENT_SONG:\n      state.currentSong = payload as Song;\n      break;\n    case SET_CURRENT_INDEX:\n      let idx = payload as number;\n      if (idx < 0) {\n        idx = state.songList.length - 1;\n      } else if (idx >= state.songList.length) {\n        idx = 0;\n      }\n      state.currentIndex = idx;\n      state.playStatus = true;\n\n      break;\n    case SET_SONG_LIST:\n      state.songList = payload as Song[];\n      break;\n    case SET_SHOW_SONG_LIST:\n      state.showSongList = payload as boolean;\n      break;\n    case SET_PLAY_STATUS:\n      state.playStatus = payload as boolean;\n      break;\n    case DELETE_SONG:\n      deleteSongFromPlayList(state, action.payload as number);\n      break;\n    case SET_FULLSCREEN:\n      state.fullScreen = payload as boolean;\n      break;\n    default:\n      break;\n  }\n}, initState);\n","export const TOGGLE_TOAST = \"TOGGLE_TOAST\";\n","import { Dispatch } from \"redux\";\nimport { getSingerListRequest } from \"../../../apis/requests/singer\";\nimport { Singer } from \"../../../typings\";\nimport { SET_SINGER_LIST } from \"./actionTypes\";\n\nexport const changeSingerListAction = (payload: Singer[]) => {\n  return {\n    type: SET_SINGER_LIST,\n    payload,\n  };\n};\n\n/**\n * 请求歌手列表\n * @param initial 首字母\n */\nexport const getSingerListAction = (initial?: string) => {\n  return async (dispatch: Dispatch) => {\n    const resp = await getSingerListRequest(0, initial);\n    dispatch(changeSingerListAction(resp.artists));\n  };\n};\n","import { Dispatch } from \"redux\";\nimport { getSingerDetailRequest } from \"../../../apis/requests/singer\";\nimport { Singer } from \"../../../typings\";\nimport { SET_SINGER_DETAIL, SET_SINGER_LOADING } from \"./actionTypes\";\n\nexport const changeSingerDetailAction = (payload: Singer) => {\n  return {\n    type: SET_SINGER_DETAIL,\n    payload,\n  };\n};\n\nexport const changeLoadingAction = (payload: boolean) => {\n  return {\n    type: SET_SINGER_LOADING,\n    payload,\n  };\n};\n\nexport const getSingerDetailAction = (id: number) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(changeLoadingAction(true));\n    const resp = await getSingerDetailRequest(id);\n    dispatch(changeSingerDetailAction(resp));\n  };\n};\n","import { axiosGet } from \"../axiosInstance\";\nimport {\n  GET_BANNERS,\n  GET_RECOMMEND_LIST,\n  GET_RECOMMEND_NEW_SONGS,\n} from \"../url\";\n\n/**\n * 请求banner数据\n * @param type\n */\nconst getBannersRequest = (type: number) => {\n  return axiosGet(GET_BANNERS, { type });\n};\n\n/**\n * 请求推荐歌单数据\n * @param limit 取出数量\n */\nconst getRecommendListRequest = (limit: number) => {\n  return axiosGet(GET_RECOMMEND_LIST, { limit });\n};\n\n/**\n * 请求推荐新歌数据\n */\nconst getRecommendNewSongsRequest = async () => {\n  const { result } = await axiosGet(GET_RECOMMEND_NEW_SONGS);\n  return result.map((item: any) => {\n    return {\n      id: item.id,\n      name: item.name,\n      album: item.song.album,\n      singers: item.song.artists,\n      dt: item.song.duration,\n    };\n  });\n};\n\nexport {\n  getBannersRequest,\n  getRecommendListRequest,\n  getRecommendNewSongsRequest,\n};\n","import { Dispatch } from \"redux\";\nimport {\n  getRecommendListRequest,\n  getRecommendNewSongsRequest,\n} from \"../../../apis/requests/recommend\";\nimport { Recomm, Song } from \"../../../typings\";\nimport { SET_RECOMMEND_LIST, SET_RECOMMEND_SONGS } from \"./actionTypes\";\n\nexport const changeRecommendList = (payload: Recomm[]) => {\n  return {\n    type: SET_RECOMMEND_LIST,\n    payload,\n  };\n};\n\nexport const changeRecommendSongs = (payload: Song[]) => {\n  return {\n    type: SET_RECOMMEND_SONGS,\n    payload,\n  };\n};\n\nexport const getRecommendListAction = (type: number) => {\n  return async (dispatch: Dispatch) => {\n    const res: any = await getRecommendListRequest(type);\n    dispatch(changeRecommendList(res.result));\n  };\n};\n\nexport const getRecommendSongsAcrion = () => {\n  return async (dispath: Dispatch) => {\n    const res: any = await getRecommendNewSongsRequest();\n    dispath(changeRecommendSongs(res));\n  };\n};\n","import { Dispatch } from \"redux\";\nimport { getRankListRequest } from \"../../../apis/requests/rank\";\nimport { SET_RANK_DATA } from \"./actionTypes\";\nimport { RankItem, RankPayload } from \"../typing\";\n\nexport const changeRankDataAction = (payload: RankPayload) => {\n  return {\n    type: SET_RANK_DATA,\n    payload,\n  };\n};\n\n/**\n * 获取榜单数据\n */\nexport const getRankListAction = () => {\n  return async (dispatch: Dispatch) => {\n    const resp: any = await getRankListRequest();\n\n    const list = resp.list,\n      globalList = list.filter((item: RankItem) => !item.tracks?.length),\n      officialList = list.filter((item: RankItem) => item.tracks?.length);\n\n    dispatch(changeRankDataAction({ globalList, officialList }));\n  };\n};\n","import { axiosGet } from \"../axiosInstance\";\nimport { GET_RANK_LIST } from \"../url\";\n\n/**\n * 请求所有榜单数据\n */\nconst getRankListRequest = () => {\n  return axiosGet(GET_RANK_LIST);\n};\n\nexport { getRankListRequest };\n","import { axiosGet } from \"../axiosInstance\";\nimport { GET_ALBUM_DETAIL_BY_ID } from \"../url\";\n\n/**\n * 请求歌单详情\n */\nconst getAlbumDetailRequest = async (id: number) => {\n  const { playlist }: any = await axiosGet(GET_ALBUM_DETAIL_BY_ID, { id });\n  return {\n    ...playlist,\n    tracks: playlist.tracks.map((item: any) => {\n      return {\n        id: item.id,\n        name: item.name,\n        album: item.al,\n        singers: item.ar,\n        dt: item.dt,\n      };\n    }),\n  };\n};\n\nexport { getAlbumDetailRequest };\n","import { SET_ALBUM_DETAIL } from \"./actionTypes\";\n\nimport { getAlbumDetailRequest } from \"../../../apis/requests/album\";\nimport { Dispatch } from \"redux\";\n\nexport const changeAlbumDetailAction = (payload: any) => {\n  return {\n    type: SET_ALBUM_DETAIL,\n    payload: payload,\n  };\n};\n\n/**\n * 请求榜单详情数据\n * @param {Number} id\n */\nexport const getAlbumDetailAction = (id: number) => {\n  return async (dispatch: Dispatch) => {\n    const resp = await getAlbumDetailRequest(id);\n    dispatch(changeAlbumDetailAction(resp));\n  };\n};\n","import { IAction, Recomm, Song } from \"../../../typings\";\nimport { produce } from \"immer\";\nimport { SET_RECOMMEND_LIST, SET_RECOMMEND_SONGS } from \"./actionTypes\";\nexport interface RecommmendState {\n  recommendList: Recomm[];\n  recommendSongs: Song[];\n  loading: boolean;\n}\n\nexport interface RecommAction extends IAction {\n  payload: Recomm[] | Song[] | boolean;\n}\n\nconst initialState: RecommmendState = {\n  recommendList: [],\n  recommendSongs: [],\n  loading: true,\n};\n\nexport default produce((state: RecommmendState, action: RecommAction) => {\n  switch (action.type) {\n    case SET_RECOMMEND_LIST:\n      state.recommendList = action.payload as Recomm[];\n      break;\n    case SET_RECOMMEND_SONGS:\n      state.recommendSongs = action.payload as Song[];\n      state.loading = false;\n      break;\n    default:\n      break;\n  }\n}, initialState);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","import React, { lazy } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nconst HomeLayout = lazy(() => import(\"../layouts/HomeLayout\"));\nconst Recommend = lazy(() => import(\"../pages/Recommend\"));\nconst Singers = lazy(() => import(\"../pages/Singers\"));\nconst Rank = lazy(() => import(\"../pages/Rank\"));\nconst Album = lazy(() => import(\"../pages/Album\"));\nconst Singer = lazy(() => import(\"../pages/Singer\"));\n\nconst routes = [\n  {\n    component: HomeLayout,\n    routes: [\n      {\n        path: \"/\",\n        exact: true,\n        render: () => {\n          return <Redirect to={\"/recommend\"}></Redirect>;\n        },\n      },\n      {\n        path: \"/recommend\",\n        key: \"recommend\",\n        component: Recommend,\n        routes: [\n          {\n            path: \"/recommend/:id\",\n            key: \"recommendAlbum\",\n            component: Album,\n          },\n        ],\n      },\n      {\n        path: \"/singers\",\n        key: \"singers\",\n        component: Singers,\n        routes: [\n          {\n            path: \"/singers/:id\",\n            key: \"singer\",\n            component: Singer,\n          },\n        ],\n      },\n      {\n        path: \"/rank\",\n        key: \"rank\",\n        component: Rank,\n        routes: [\n          {\n            path: \"/rank/:id\",\n            key: \"rank\",\n            component: Album,\n          },\n        ],\n      },\n      {\n        path: \"/album/:id\",\n        exact: true,\n        key: \"album\",\n        component: Album,\n      },\n    ],\n  },\n];\n\nexport default routes;\n","import { stat } from \"fs\";\nimport { produce } from \"immer\";\nimport { StoreState } from \".\";\nimport { IAction } from \"../typings\";\nimport { TOGGLE_TOAST } from \"./actionTypes\";\n\nexport interface ToastAction extends IAction {\n  show: boolean;\n  payload?: \"string\";\n}\n\nexport interface ToastState {\n  showToast: boolean;\n  toastText?: string;\n}\n\nconst initialState: ToastState = {\n  showToast: false,\n  toastText: \"\",\n};\n\nexport default produce((state: ToastState, action: ToastAction) => {\n  switch (action.type) {\n    case TOGGLE_TOAST:\n      if (action.show) {\n        state.showToast = true;\n        state.toastText = action.payload as string;\n      } else {\n        state.showToast = false;\n      }\n      break;\n\n    default:\n      break;\n  }\n}, initialState);\n","import produce from \"immer\";\nimport { IAction, Singer } from \"../../../typings\";\nimport { SET_SINGER_LIST } from \"./actionTypes\";\n\nexport interface SingersState {\n  singerList: Singer[];\n}\n\nexport interface SingerAction extends IAction {\n  payload: Singer[];\n}\n\nconst initState: SingersState = {\n  singerList: [],\n};\n\nexport default produce((state: SingersState, action: SingerAction) => {\n  switch (action.type) {\n    case SET_SINGER_LIST:\n      state.singerList = action.payload as Singer[];\n      break;\n\n    default:\n      break;\n  }\n}, initState);\n","import produce from \"immer\";\nimport { IAction } from \"../../../typings\";\nimport { RankItem, RankPayload } from \"../typing\";\nimport { SET_RANK_DATA } from \"./actionTypes\";\n\nexport interface RankState {\n  globalList: RankItem[];\n  officialList: RankItem[];\n  loading: boolean;\n}\n\nexport interface RankAction extends IAction {\n  payload: RankPayload;\n}\n\nconst initState: RankState = {\n  globalList: [],\n  officialList: [],\n  loading: true,\n};\n\nexport default produce((state: RankState, action: RankAction) => {\n  switch (action.type) {\n    case SET_RANK_DATA:\n      const { globalList, officialList } = action.payload as RankPayload;\n      state.globalList = globalList;\n      state.officialList = officialList;\n      state.loading = false;\n      break;\n    default:\n      break;\n  }\n}, initState);\n","import produce from \"immer\";\nimport { AlbumDetailProps } from \"../Detail\";\nimport { SET_ALBUM_DETAIL } from \"./actionTypes\";\n\nexport interface AlbumState {\n  albumDetail: AlbumDetailProps | null;\n  loading: boolean;\n}\n\nexport interface AlbumAction {\n  type: string;\n  payload: AlbumDetailProps | null;\n}\n\nconst initialState: AlbumState = {\n  albumDetail: null,\n  loading: true,\n};\n\nexport default produce((state: AlbumState, action: AlbumAction) => {\n  switch (action.type) {\n    case SET_ALBUM_DETAIL:\n      state.albumDetail = action.payload;\n      state.loading = false;\n      break;\n    default:\n      break;\n  }\n}, initialState);\n","import produce from \"immer\";\nimport { IAction, Singer } from \"../../../typings\";\nimport { SET_SINGER_DETAIL } from \"./actionTypes\";\n\nexport interface SingerState {\n  singerDetail: Singer | null;\n  loading: boolean;\n}\n\nexport interface SingerAction extends IAction {\n  payload: boolean | Singer;\n}\n\nconst initState: SingerState = {\n  singerDetail: null,\n  loading: true,\n};\n\nexport default produce((state: SingerState, action: SingerAction) => {\n  switch (action.type) {\n    case SET_SINGER_DETAIL:\n      state.singerDetail = action.payload as Singer;\n      state.loading = false;\n      break;\n\n    default:\n      break;\n  }\n}, initState);\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport { reducer as recommendReducer } from \"../pages/Recommend/store\";\nimport thunk from \"redux-thunk\";\nimport { RecommmendState } from \"../pages/Recommend/store/reducer\";\nimport toastReducer, { ToastState } from \"./reducer\";\nimport { PlayerState } from \"../components/Player/store/reducer\";\nimport { reducer as playerReducer } from \"../components/Player/store\";\nimport { SingersState } from \"../pages/Singers/store/reducer\";\nimport { reducer as singersReducer } from \"../pages/Singers/store\";\nimport { RankState } from \"../pages/Rank/store/reducer\";\nimport { reducer as rankReducer } from \"../pages/Rank/store\";\nimport { AlbumState } from \"../pages/Album/store/reducer\";\nimport { reducer as albumReducer } from \"../pages/Album/store\";\nimport { SingerState } from \"../pages/Singer/store/reducer\";\nimport { reducer as singerReducer } from \"../pages/Singer/store\";\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport interface StoreState {\n  recommend: RecommmendState;\n  toast: ToastState;\n  player: PlayerState;\n  singers: SingersState;\n  rank: RankState;\n  album: AlbumState;\n  singer: SingerState;\n}\n\nconst reducers = combineReducers({\n  recommend: recommendReducer,\n  toast: toastReducer,\n  player: playerReducer,\n  singers: singersReducer,\n  rank: rankReducer,\n  album: albumReducer,\n  singer: singerReducer,\n});\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","import React, { Suspense } from \"react\";\nimport HomeLayout from \"./layouts/HomeLayout\";\nimport style from \"./App.module.scss\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { renderRoutes } from \"react-router-config\";\nimport routes from \"./router\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className={style[\"App\"]}>\n        <BrowserRouter>\n          <Suspense fallback={null}>{renderRoutes(routes)}</Suspense>\n        </BrowserRouter>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/variable.scss\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./styles/index.scss\";\n\nimport \"collin-ui/dist/index.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}